#+PROPERTY: header-args:emacs-lisp :tangle yes

* Start with initial frame maximized
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'initial-frame-alist '(fullscreen . fullwidth))
#+END_SRC

#+RESULTS:
: ((fullscreen . fullwidth) (fullscreen . maximized))

* Other starter kit bits to load for basic LigonLab use
  Here indicate starter-kits to load by default.
  #+begin_src emacs-lisp :tangle yes
  (starter-kit-load "python") ;; Breaks w/emacs24?; see http://python.6.n6.nabble.com/problem-with-byte-code-td2012559.html for possible work-around
  (starter-kit-load "org")
  #+end_src

* Source block execution
   #+begin_src emacs-lisp :tangle yes                                  
   (org-babel-do-load-languages                                        
    (quote org-babel-load-languages)                                   
    (quote ((emacs-lisp . t)                                           
            (python . t)                                               
            (shell . t) ; If an error, trying commenting this line...  
            ;(sh . t)   ; ...and uncommenting this one.                
            (org . t)                                                  
            (dot . nil)                                                
            (ditaa . nil)                                              
            (R . nil)                                                  
            (ipython . nil)                                            
            (octave . nil)                                             
            (gnuplot . nil)                                            
            (ledger . nil)                                             
            (asymptote . nil)                                          
            (latex . nil))))                                           
   #+end_src                                                           

   #+RESULTS:

   You'll probably want to execute the following, but consider that
   this may create a security issue.
   #+begin_src emacs-lisp :tangle yes
   ; Do not prompt to confirm evaluation
   ; This may be dangerous - make sure you understand the consequences
   ; of setting this -- see the docstring for details
   (setq org-confirm-babel-evaluate nil)
   #+end_src

   #+RESULTS:

* ELPA Package Archives
 #+BEGIN_SRC emacs-lisp :tangle no
 ;(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
 (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
 (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t) ; Org-mode's
 #+END_SRC

 #+RESULTS:

* Magit-status global key
#+BEGIN_SRC emacs-lisp
(use-package magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

#+RESULTS:
: magit-status

* Fix for problem with exec-path on MacOS
  Emacs on MacOS has an issue in setting the path it searches for
  executables correctly.  Here's an emacs module that purports to
  solve that problem.
#+BEGIN_SRC emacs-lisp :tangle yes
(when (memq window-system '(mac ns))
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)))
#+END_SRC

#+RESULTS:

* Some =org-mode= additions
** Use inline tasks
#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src
** Setup org-drawers
#+begin_src emacs-lisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK" "SETUP")))
#+end_src


** Use org-tempo instead of easy templates
   #+begin_src emacs-lisp
   (require 'org-tempo)
   (setq org-tempo-keywords-alist 
          (quote (("L" . "latex")
                 ("H" . "html")
                 ("A" . "ascii"))))

   (add-to-list 'org-structure-template-alist '("p" . "src python
"))
   (add-to-list 'org-structure-template-alist '("i" . "src ipython
"))
   #+end_src

   #+RESULTS:
   : ((i . src ipython
   : ) (p . src python
   : ) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))



   #+end_src

* Define "unfill-paragraph"
  See https://www.emacswiki.org/emacs/UnfillParagraph
  #+begin_src emacs-lisp
  (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))

  (define-key global-map "\M-Q" 'unfill-paragraph)
  #+end_src
